{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst multipartRequest = require('./lib/multipart-request');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst anySignal = require('any-signal');\n\nconst AbortController = require('abort-controller').default;\n\nmodule.exports = configure(api => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {import('../../ipfs/src/core/components/add-all').AddAll<import('.').HttpOptions>}\n   */\n  async function* addAll(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const progressFn = options.progress; // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      signal,\n      ...(await multipartRequest(input, controller, options.headers))\n    });\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file);\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0);\n      }\n    }\n  }\n\n  return addAll;\n});\n/**\n * @typedef {import('../../ipfs/src/core/components/add-all').UnixFSEntry} UnixFSEntry\n */\n\n/**\n * @returns {UnixFSEntry}\n */\n\nfunction toCoreInterface(_ref) {\n  let {\n    name,\n    hash,\n    size,\n    mode,\n    mtime,\n    mtimeNsecs\n  } = _ref;\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  } // @ts-ignore\n\n\n  return output;\n}","map":{"version":3,"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","default","module","exports","api","addAll","input","options","progressFn","progress","controller","signal","res","post","searchParams","Boolean","timeout","headers","file","ndjson","hash","undefined","toCoreInterface","bytes","name","size","mode","mtime","mtimeNsecs","output","path","cid","parseInt","secs","nsecs"],"sources":["/Users/lalit/Documents/BlockChain Development/blockchainEcommerce/client/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller').default\n\nmodule.exports = configure((api) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {import('../../ipfs/src/core/components/add-all').AddAll<import('.').HttpOptions>}\n   */\n  async function * addAll (input, options = {}) {\n    const progressFn = options.progress\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      signal,\n      ...(\n        await multipartRequest(input, controller, options.headers)\n      )\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * @typedef {import('../../ipfs/src/core/components/add-all').UnixFSEntry} UnixFSEntry\n */\n\n/**\n * @returns {UnixFSEntry}\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  // @ts-ignore\n  return output\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,yBAAD,CAAhC;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,kBAAD,CAAP,CAA4BO,OAApD;;AAEAC,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAAEQ,GAAD,IAAS;EAClC;;EACA;AACF;AACA;EACE,gBAAiBC,MAAjB,CAAyBC,KAAzB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC5C,MAAMC,UAAU,GAAGD,OAAO,CAACE,QAA3B,CAD4C,CAG5C;;IACA,MAAMC,UAAU,GAAG,IAAIV,eAAJ,EAAnB;IACA,MAAMW,MAAM,GAAGZ,SAAS,CAAC,CAACW,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAAD,CAAxB;IAEA,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,KAAT,EAAgB;MAChCC,YAAY,EAAEhB,iBAAiB,CAAC;QAC9B,mBAAmB,IADW;QAE9B,GAAGS,OAF2B;QAG9BE,QAAQ,EAAEM,OAAO,CAACP,UAAD;MAHa,CAAD,CADC;MAMhCQ,OAAO,EAAET,OAAO,CAACS,OANe;MAOhCL,MAPgC;MAQhC,IACE,MAAMd,gBAAgB,CAACS,KAAD,EAAQI,UAAR,EAAoBH,OAAO,CAACU,OAA5B,CADxB;IARgC,CAAhB,CAAlB;;IAaA,WAAW,IAAIC,IAAf,IAAuBN,GAAG,CAACO,MAAJ,EAAvB,EAAqC;MACnCD,IAAI,GAAGvB,OAAO,CAACuB,IAAD,CAAd;;MAEA,IAAIA,IAAI,CAACE,IAAL,KAAcC,SAAlB,EAA6B;QAC3B,MAAMC,eAAe,CAACJ,IAAD,CAArB;MACD,CAFD,MAEO,IAAIV,UAAJ,EAAgB;QACrBA,UAAU,CAACU,IAAI,CAACK,KAAL,IAAc,CAAf,CAAV;MACD;IACF;EACF;;EACD,OAAOlB,MAAP;AACD,CApCyB,CAA1B;AAsCA;AACA;AACA;;AAEA;AACA;AACA;;AACA,SAASiB,eAAT,OAAyE;EAAA,IAA/C;IAAEE,IAAF;IAAQJ,IAAR;IAAcK,IAAd;IAAoBC,IAApB;IAA0BC,KAA1B;IAAiCC;EAAjC,CAA+C;EACvE,MAAMC,MAAM,GAAG;IACbC,IAAI,EAAEN,IADO;IAEbO,GAAG,EAAE,IAAItC,GAAJ,CAAQ2B,IAAR,CAFQ;IAGbK,IAAI,EAAEO,QAAQ,CAACP,IAAD;EAHD,CAAf;;EAMA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;IAChBG,MAAM,CAACH,IAAP,GAAcM,QAAQ,CAACN,IAAD,EAAO,CAAP,CAAtB;EACD;;EAED,IAAIC,KAAK,IAAI,IAAb,EAAmB;IACjBE,MAAM,CAACF,KAAP,GAAe;MACbM,IAAI,EAAEN,KADO;MAEbO,KAAK,EAAEN,UAAU,IAAI;IAFR,CAAf;EAID,CAhBsE,CAkBvE;;;EACA,OAAOC,MAAP;AACD"},"metadata":{},"sourceType":"script"}