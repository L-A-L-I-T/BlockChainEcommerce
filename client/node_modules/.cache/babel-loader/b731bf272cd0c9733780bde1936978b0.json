{"ast":null,"code":"'use strict';\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst ipldRaw = require('ipld-raw');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst anySignal = require('any-signal');\n\nconst AbortController = require('abort-controller').default;\n\nconst multicodec = require('multicodec');\n\nmodule.exports = configure((api, opts) => {\n  const formats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: ipldRaw\n  };\n  const ipldOptions = opts && opts.ipld || {};\n  const configuredFormats = ipldOptions && ipldOptions.formats || [];\n  configuredFormats.forEach(format => {\n    formats[format.codec] = format;\n  });\n  return async function (dagNode) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid);\n      options = { ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      };\n      delete options.cid;\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    };\n    const number = multicodec.getNumber(options.format);\n    let format = formats[number];\n\n    if (!format) {\n      if (opts && opts.ipld && opts.ipld.loadFormat) {\n        format = await opts.ipld.loadFormat(options.format);\n      }\n\n      if (!format) {\n        throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options');\n      }\n    }\n\n    if (!format.util || !format.util.serialize) {\n      throw new Error('Format does not support utils.serialize function');\n    }\n\n    const serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('dag/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(serialized, controller, options.headers))\n    });\n    const data = await res.json();\n    return new CID(data.Cid['/']);\n  };\n});","map":{"version":3,"names":["dagCBOR","require","dagPB","ipldRaw","CID","multihash","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","default","multicodec","module","exports","api","opts","formats","DAG_PB","DAG_CBOR","RAW","ipldOptions","ipld","configuredFormats","forEach","format","codec","dagNode","options","cid","hashAlg","Error","decode","name","inputEnc","number","getNumber","loadFormat","util","serialize","serialized","controller","signal","res","post","timeout","searchParams","headers","data","json","Cid"],"sources":["/Users/lalit/Documents/BlockChain Development/blockchainEcommerce/client/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst dagCBOR = require('ipld-dag-cbor')\nconst dagPB = require('ipld-dag-pb')\nconst ipldRaw = require('ipld-raw')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller').default\nconst multicodec = require('multicodec')\n\nmodule.exports = configure((api, opts) => {\n  const formats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: ipldRaw\n  }\n\n  const ipldOptions = (opts && opts.ipld) || {}\n  const configuredFormats = (ipldOptions && ipldOptions.formats) || []\n  configuredFormats.forEach(format => {\n    formats[format.codec] = format\n  })\n\n  return async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      options = {\n        ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    }\n\n    const number = multicodec.getNumber(options.format)\n    let format = formats[number]\n\n    if (!format) {\n      if (opts && opts.ipld && opts.ipld.loadFormat) {\n        format = await opts.ipld.loadFormat(options.format)\n      }\n\n      if (!format) {\n        throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options')\n      }\n    }\n\n    if (!format.util || !format.util.serialize) {\n      throw new Error('Format does not support utils.serialize function')\n    }\n\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('dag/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(serialized, controller, options.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}