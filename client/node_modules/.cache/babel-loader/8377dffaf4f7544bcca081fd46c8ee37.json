{"ast":null,"code":"'use strict';\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input');\n\nconst modeToString = require('./mode-to-string');\n\nconst mtimeToObject = require('./mtime-to-object');\n\nconst {\n  File,\n  FormData\n} = require('ipfs-utils/src/globalthis');\n\nasync function multipartRequest() {\n  let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let abortController = arguments.length > 1 ? arguments[1] : undefined;\n  let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const formData = new FormData();\n  let index = 0;\n\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n\n    let fieldName = type + fileSuffix;\n    const qs = [];\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`);\n    }\n\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtimeToObject(mtime);\n      qs.push(`mtime=${secs}`);\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path));\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    }\n\n    index++;\n  }\n\n  return {\n    headers,\n    body: formData\n  };\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"names":["normaliseInput","require","modeToString","mtimeToObject","File","FormData","multipartRequest","source","abortController","headers","formData","index","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","body","module","exports"],"sources":["/Users/lalit/Documents/BlockChain Development/blockchainEcommerce/client/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"sourcesContent":["'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input')\nconst modeToString = require('./mode-to-string')\nconst mtimeToObject = require('./mtime-to-object')\nconst { File, FormData } = require('ipfs-utils/src/globalthis')\n\nasync function multipartRequest (source = '', abortController, headers = {}) {\n  const formData = new FormData()\n  let index = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if (mtime != null) {\n      const {\n        secs, nsecs\n      } = mtimeToObject(mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path))\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    }\n\n    index++\n  }\n\n  return {\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,2CAAD,CAA9B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAM;EAAEG,IAAF;EAAQC;AAAR,IAAqBJ,OAAO,CAAC,2BAAD,CAAlC;;AAEA,eAAeK,gBAAf,GAA6E;EAAA,IAA5CC,MAA4C,uEAAnC,EAAmC;EAAA,IAA/BC,eAA+B;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC3E,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,EAAjB;EACA,IAAIM,KAAK,GAAG,CAAZ;;EAEA,WAAW,MAAM;IAAEC,OAAF;IAAWC,IAAX;IAAiBC,IAAjB;IAAuBC;EAAvB,CAAjB,IAAmDf,cAAc,CAACO,MAAD,CAAjE,EAA2E;IACzE,IAAIS,UAAU,GAAG,EAAjB;IACA,MAAMC,IAAI,GAAGL,OAAO,GAAG,MAAH,GAAY,KAAhC;;IAEA,IAAID,KAAK,GAAG,CAAZ,EAAe;MACbK,UAAU,GAAI,IAAGL,KAAM,EAAvB;IACD;;IAED,IAAIO,SAAS,GAAGD,IAAI,GAAGD,UAAvB;IACA,MAAMG,EAAE,GAAG,EAAX;;IAEA,IAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKM,SAA9B,EAAyC;MACvCD,EAAE,CAACE,IAAH,CAAS,QAAOnB,YAAY,CAACY,IAAD,CAAO,EAAnC;IACD;;IAED,IAAIC,KAAK,IAAI,IAAb,EAAmB;MACjB,MAAM;QACJO,IADI;QACEC;MADF,IAEFpB,aAAa,CAACY,KAAD,CAFjB;MAIAI,EAAE,CAACE,IAAH,CAAS,SAAQC,IAAK,EAAtB;;MAEA,IAAIC,KAAK,IAAI,IAAb,EAAmB;QACjBJ,EAAE,CAACE,IAAH,CAAS,eAAcE,KAAM,EAA7B;MACD;IACF;;IAED,IAAIJ,EAAE,CAACK,MAAP,EAAe;MACbN,SAAS,GAAI,GAAEA,SAAU,IAAGC,EAAE,CAACM,IAAH,CAAQ,GAAR,CAAa,EAAzC;IACD;;IAED,IAAIb,OAAJ,EAAa;MACXF,QAAQ,CAACgB,GAAT,CAAaR,SAAb,EAAwBN,OAAxB,EAAiCe,kBAAkB,CAACd,IAAD,CAAnD;IACD,CAFD,MAEO;MACLH,QAAQ,CAACgB,GAAT,CAAaR,SAAb,EAAwB,IAAId,IAAJ,CAAS,CAAC,EAAD,CAAT,EAAeuB,kBAAkB,CAACd,IAAD,CAAjC,EAAyC;QAAEI,IAAI,EAAE;MAAR,CAAzC,CAAxB;IACD;;IAEDN,KAAK;EACN;;EAED,OAAO;IACLF,OADK;IAELmB,IAAI,EAAElB;EAFD,CAAP;AAID;;AAEDmB,MAAM,CAACC,OAAP,GAAiBxB,gBAAjB"},"metadata":{},"sourceType":"script"}