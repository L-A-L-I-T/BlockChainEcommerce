{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst configure = require('../lib/configure');\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\nmodule.exports = configure((api, options) => {\n  const getBlock = require('../block/get')(options);\n\n  const dagResolve = require('./resolve')(options);\n\n  return async function (cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const resolved = await dagResolve(cid, options);\n    const block = await getBlock(resolved.cid, options);\n    const dagResolver = resolvers[resolved.cid.codec];\n\n    if (!dagResolver) {\n      throw Object.assign(new Error(`Missing IPLD format \"${resolved.cid.codec}\"`), {\n        missingMulticodec: resolved.cid.codec\n      });\n    }\n\n    if (resolved.cid.codec === 'raw' && !resolved.remPath) {\n      resolved.remainderPath = '/';\n    }\n\n    return dagResolver.resolve(block.data, resolved.remainderPath);\n  };\n});","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","configure","resolvers","resolver","module","exports","api","options","getBlock","dagResolve","cid","resolved","block","dagResolver","codec","Object","assign","Error","missingMulticodec","remPath","remainderPath","resolve","data"],"sources":["/Users/lalit/Documents/BlockChain Development/blockchainEcommerce/client/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst configure = require('../lib/configure')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n}\n\nmodule.exports = configure((api, options) => {\n  const getBlock = require('../block/get')(options)\n  const dagResolve = require('./resolve')(options)\n\n  return async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n    const dagResolver = resolvers[resolved.cid.codec]\n\n    if (!dagResolver) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${resolved.cid.codec}\"`),\n        { missingMulticodec: resolved.cid.codec }\n      )\n    }\n\n    if (resolved.cid.codec === 'raw' && !resolved.remPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return dagResolver.resolve(block.data, resolved.remainderPath)\n  }\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AAEA,MAAMI,SAAS,GAAG;EAChB,YAAYH,OAAO,CAACI,QADJ;EAEhB,UAAUN,KAAK,CAACM,QAFA;EAGhBH,GAAG,EAAEA,GAAG,CAACG;AAHO,CAAlB;AAMAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,CAACK,GAAD,EAAMC,OAAN,KAAkB;EAC3C,MAAMC,QAAQ,GAAGV,OAAO,CAAC,cAAD,CAAP,CAAwBS,OAAxB,CAAjB;;EACA,MAAME,UAAU,GAAGX,OAAO,CAAC,WAAD,CAAP,CAAqBS,OAArB,CAAnB;;EAEA,OAAO,gBAAOG,GAAP,EAA6B;IAAA,IAAjBH,OAAiB,uEAAP,EAAO;IAClC,MAAMI,QAAQ,GAAG,MAAMF,UAAU,CAACC,GAAD,EAAMH,OAAN,CAAjC;IACA,MAAMK,KAAK,GAAG,MAAMJ,QAAQ,CAACG,QAAQ,CAACD,GAAV,EAAeH,OAAf,CAA5B;IACA,MAAMM,WAAW,GAAGX,SAAS,CAACS,QAAQ,CAACD,GAAT,CAAaI,KAAd,CAA7B;;IAEA,IAAI,CAACD,WAAL,EAAkB;MAChB,MAAME,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,wBAAuBN,QAAQ,CAACD,GAAT,CAAaI,KAAM,GAArD,CADI,EAEJ;QAAEI,iBAAiB,EAAEP,QAAQ,CAACD,GAAT,CAAaI;MAAlC,CAFI,CAAN;IAID;;IAED,IAAIH,QAAQ,CAACD,GAAT,CAAaI,KAAb,KAAuB,KAAvB,IAAgC,CAACH,QAAQ,CAACQ,OAA9C,EAAuD;MACrDR,QAAQ,CAACS,aAAT,GAAyB,GAAzB;IACD;;IAED,OAAOP,WAAW,CAACQ,OAAZ,CAAoBT,KAAK,CAACU,IAA1B,EAAgCX,QAAQ,CAACS,aAAzC,CAAP;EACD,CAjBD;AAkBD,CAtByB,CAA1B"},"metadata":{},"sourceType":"script"}