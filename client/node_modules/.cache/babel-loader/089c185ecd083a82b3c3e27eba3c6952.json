{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* rmAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = options || {};\n\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', recursive);\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          yield* pin.Pins.map(cid => new CID(cid));\n          continue;\n        }\n\n        yield new CID(pin);\n      }\n    }\n  };\n});","map":{"version":3,"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","res","post","timeout","signal","headers","arg","pin","ndjson","Pins","map","cid"],"sources":["/Users/lalit/Documents/BlockChain Development/blockchainEcommerce/client/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * rmAll (source, options = {}) {\n    options = options || {}\n\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', recursive)\n\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map(cid => new CID(cid))\n          continue\n        }\n        yield new CID(pin)\n      }\n    }\n  }\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;EAChC,OAAO,gBAAiBC,KAAjB,CAAwBC,MAAxB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACnDA,OAAO,GAAGA,OAAO,IAAI,EAArB;;IAEA,WAAW,MAAM;MAAEC,IAAF;MAAQC;IAAR,CAAjB,IAAwCT,cAAc,CAACM,MAAD,CAAtD,EAAgE;MAC9D,MAAMI,YAAY,GAAG,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAArB;MACAA,YAAY,CAACE,MAAb,CAAoB,KAApB,EAA4B,GAAEJ,IAAK,EAAnC;MAEA,IAAIC,SAAS,IAAI,IAAjB,EAAuBC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BJ,SAA9B;MAEvB,MAAMK,GAAG,GAAG,MAAMV,GAAG,CAACW,IAAJ,CAAS,QAAT,EAAmB;QACnCC,OAAO,EAAET,OAAO,CAACS,OADkB;QAEnCC,MAAM,EAAEV,OAAO,CAACU,MAFmB;QAGnCC,OAAO,EAAEX,OAAO,CAACW,OAHkB;QAInCR,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;UAE9BY,GAAG,EAAG,GAAEX,IAAK,EAFiB;UAG9BC;QAH8B,CAAD;MAJI,CAAnB,CAAlB;;MAWA,WAAW,MAAMW,GAAjB,IAAwBN,GAAG,CAACO,MAAJ,EAAxB,EAAsC;QACpC,IAAID,GAAG,CAACE,IAAR,EAAc;UAAE;UACd,OAAQF,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAaC,GAAG,IAAI,IAAI3B,GAAJ,CAAQ2B,GAAR,CAApB,CAAR;UACA;QACD;;QACD,MAAM,IAAI3B,GAAJ,CAAQuB,GAAR,CAAN;MACD;IACF;EACF,CA5BD;AA6BD,CA9ByB,CAA1B"},"metadata":{},"sourceType":"script"}